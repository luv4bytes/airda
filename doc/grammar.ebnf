program = statement, {statement};

moduleDeclaration = "Mod", identifier, endOfStatment;

statement = moduleDeclaration;

variableDeclaration = identifier, typeSpecifier, typeIdentifier, [assignOp, expression], endOfStatment;

assignment = identifier, assignOp, expression, endOfStatment;

expression = identifier
            | numericLiteral
            | "(", expression, ")"
            | unaryExpression
            | binaryExpression;

unaryExpression = unaryOp, expression;

unaryOp = "-";

binaryExpression = expression, binaryOp, expression;

binaryOp = "+" | "*" | "/";

assignOp = "=";

endOfStatment = ";";

typeSpecifier = ":";

typeIdentifier = identifier;

identifier = unicodeChar, {(digit | unicodeChar | "_")};

unicodeChar = ? unicode character ?;

numericLiteral = integer | decimal;

integer = (["-"], digitNoNull, {digit}) | "0";

decimal = (["-"], {digit}, ".", digit, {digit}) | {digit};

digit = "0" | "1" | "2" | "3" | "4" 
            | "5" | "6" | "7" | "8" | "9";

digitNoNull = "1" | "2" | "3" | "4" 
                  | "5" | "6" | "7" | "8" | "9";
